              A MODEX LIBRARY FOR USE WITH WATCOM C/C++ 16
                            SMALL MEMORY MODELL

-What is it?
Hi all. I really hate writing docs, so I won't make it long....:) If you don't
know anything about modex, see it as a video-mode which works on almost ANY
vga-card. My library supports 320x240x256 and 3.5 video page.
(for more info on modex see: ftp://x2ftp.oulu.fi/pub/msdos/programming).
To get back on the question: This is a package containing a few graphic 
routines for modex, for use with the c/c++ 16-bit real mode compiler. 

-Okay, what does it contain?
The archive you just unpacked contains a few routines to do things in modex

Currently implemented are routines to:
*initialise/close modex
*support paging (up to 3.5 pages )
*do palette handling (set, get, fade)
*clear the screen
*wait for the Vertical Retrace (VRT)
*draw polygons
*BitBlit horizontal lines
*And last but not least: write pixels

-How does it work?
It is very simple. Just include the modex.h header file in your source, and
use wcl to compile the source and link the object file x_wc16s.obj to it.
eg, to compile the (lame) demo try this:
wcl /ms /k8192 xdemo.c x_wc32f.obj
Be sure to insert the /k8192 option. This gives an 8kb stack, which is
necessary. You can also use the makefile, hence a "wmake" should do the trick. 


If you want to change the asm source, you must have TASM 3.2 or higher to
re-assemble it.

-For who is this intended?
I wrote this modex lib because I wanted to code a demo (it still isn't
finished, but MY problem:(). This means I coded all the routines in higly
optimized assembly language. The library is therefor intended for ppl who
want to code their own demo, or something else that requires REAL speed.
It is also by no means complete. A lot of standard routines, eg a line rou-
tine, are not implemented, simply because I didn't need them.

-Warranty.
Under the GNU Public Licence.

-Remarks
Send bug-reports or suggestions to:
geertj@stack.urc.tue.nl

flames to:
/dev/null

Take care, and happy coding: 
Geert Jansen.